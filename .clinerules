# 📘 clinerules: 最低限の設計・実装ルールセット

## 1. 関心の分離（Separation of Concerns）
- ドメインロジックはUIやインフラの影響を受けずに記述すること。
- 各レイヤーは明確に分離され、依存方向は内向き（ドメイン→外部は禁止）。

## 2. 副作用の分離（Isolation of Side Effects）
- 副作用のある処理（IO, DBアクセス, HTTPなど）は境界に閉じ込め、純粋な関数でラップして扱う。
- テストしやすくするために、副作用を引き起こすコードとビジネスロジックを混ぜない。

## 3. 明示的な依存性（Explicit Dependencies）
- 依存はすべて引数として渡す（DI）。グローバル状態や隠れた依存は避ける。
- ファイルや関数が依存するモジュールは、明示的にインポートして可視化する。

## 4. データ構造の契約（Shape Contracts）
- 入出力の型を定義し、実装とテストの契約として活用する。
- 型（TypeScript, Zod, io-ts,など）でバリデーションし、信頼境界を保護する。

## 5. 可視性の原則（Encapsulation by Default）
- 不必要に公開しない（関数、クラス、変数はprivate or ファイルスコープに閉じ込める）。
- モジュールの公開インターフェースは最小に絞る。

## 6. 命名は目的を表す（Name for What, Not How）
- 名前は「何をするか」を表す。実装方法や内部事情ではなく、目的を重視。
- 一貫性を保ち、ドメイン用語を使って表現する。
